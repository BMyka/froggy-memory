{"ast":null,"code":"var _jsxFileName = \"/home/myka/repos/froggy-memory/src/components/Main.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport CardsGrid from \"./CardsGrid/CardsGrid\";\nimport Scoreboard from \"./Scoreboard/Scoreboard\";\nimport { shuffleArray, getImageNames, formatImageName } from \"../utils\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Main = () => {\n  _s();\n  const [frogs, setFrogs] = useState([]);\n  const [clickedFrogs, setClickedFrogs] = useState([]);\n  const [currentScore, setCurrentScore] = useState(0);\n  const [highScore, setHighScore] = useState(0);\n  const FROG_IMAGE_NAMES = getImageNames();\n  useEffect(() => {\n    const loadFrogs = () => {\n      const frogImages = FROG_IMAGE_NAMES.map((imageName, index) => ({\n        id: uuidv4(),\n        name: formatImageName(imageName),\n        image: require(`../assets/${imageName}`)\n      }));\n      setFrogs(shuffleArray(frogImages));\n    };\n    loadFrogs();\n  }, []);\n  const handleCardClick = e => {\n    const frogName = e.target.parentNode.lastChild.textContent;\n    playRound(frogName);\n    setFrogs(shuffleArray(frogs));\n  };\n  const playRound = frogName => {\n    if (clickedFrogs.includes(frogName)) {\n      resetGame();\n    } else {\n      const newScore = currentScore + 1;\n      if (newScore > highScore) {\n        setCurrentScore(newScore);\n        setClickedFrogs(prevState => [...prevState, frogName]);\n      }\n    }\n  };\n  const resetGame = () => {\n    setClickedFrogs([]);\n    setCurrentScore(0);\n  };\n  return /*#__PURE__*/_jsxDEV(MainWrapper, {\n    children: [/*#__PURE__*/_jsxDEV(Scoreboard, {\n      currentScore: currentScore,\n      highScore: highScore\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardsGrid, {\n      frogs: frogs,\n      handleCardClick: handleCardClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n_s(Main, \"bWVQz6/p116BKjDXGB0V3LufUa0=\");\n_c = Main;\nconst MainWrapper = styled.main`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  gap: 4rem;\n  padding: 4rem;\n  margin-bottom: 3.5rem;\n`;\n_c2 = MainWrapper;\nexport default Main;\nvar _c, _c2;\n$RefreshReg$(_c, \"Main\");\n$RefreshReg$(_c2, \"MainWrapper\");","map":{"version":3,"names":["React","useState","useEffect","styled","CardsGrid","Scoreboard","shuffleArray","getImageNames","formatImageName","v4","uuidv4","jsxDEV","_jsxDEV","Main","_s","frogs","setFrogs","clickedFrogs","setClickedFrogs","currentScore","setCurrentScore","highScore","setHighScore","FROG_IMAGE_NAMES","loadFrogs","frogImages","map","imageName","index","id","name","image","require","handleCardClick","e","frogName","target","parentNode","lastChild","textContent","playRound","includes","resetGame","newScore","prevState","MainWrapper","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","main","_c2","$RefreshReg$"],"sources":["/home/myka/repos/froggy-memory/src/components/Main.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport CardsGrid from \"./CardsGrid/CardsGrid\";\nimport Scoreboard from \"./Scoreboard/Scoreboard\";\nimport { shuffleArray, getImageNames, formatImageName } from \"../utils\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nconst Main = () => {\n  const [frogs, setFrogs] = useState([]);\n  const [clickedFrogs, setClickedFrogs] = useState([]);\n  const [currentScore, setCurrentScore] = useState(0);\n  const [highScore, setHighScore] = useState(0);\n\n  const FROG_IMAGE_NAMES = getImageNames();\n  useEffect(() => {\n    const loadFrogs = () => {\n      const frogImages = FROG_IMAGE_NAMES.map((imageName, index) => ({\n        id: uuidv4(),\n        name: formatImageName(imageName),\n        image: require(`../assets/${imageName}`),\n      }));\n      setFrogs(shuffleArray(frogImages));\n    };\n\n    loadFrogs();\n  }, []);\n\n  const handleCardClick = (e) => {\n    const frogName = e.target.parentNode.lastChild.textContent;\n    playRound(frogName);\n    setFrogs(shuffleArray(frogs));\n  };\n\n  const playRound = (frogName) => {\n    if (clickedFrogs.includes(frogName)) {\n      resetGame();\n    } else {\n      const newScore = currentScore + 1;\n      if (newScore > highScore) {\n        setCurrentScore(newScore);\n        setClickedFrogs((prevState) => [...prevState, frogName]);\n      }\n    }\n  };\n\n  const resetGame = () => {\n    setClickedFrogs([]);\n    setCurrentScore(0);\n  };\n\n  return (\n    <MainWrapper>\n      <Scoreboard\n        currentScore={currentScore}\n        highScore={highScore}\n      ></Scoreboard>\n      <CardsGrid frogs={frogs} handleCardClick={handleCardClick}></CardsGrid>\n    </MainWrapper>\n  );\n};\n\nconst MainWrapper = styled.main`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  gap: 4rem;\n  padding: 4rem;\n  margin-bottom: 3.5rem;\n`;\n\nexport default Main;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}