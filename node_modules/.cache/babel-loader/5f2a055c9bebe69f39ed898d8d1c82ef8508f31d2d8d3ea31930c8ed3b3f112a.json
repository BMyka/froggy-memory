{"ast":null,"code":"var _jsxFileName = \"/home/myka/repos/froggy-memory/src/components/Main.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport CardsGrid from \"./CardsGrid/CardsGrid\";\nimport Scoreboard from \"./Scoreboard/Scoreboard\";\nimport { shuffleArray, getImageNames, formatImageName } from \"../utils\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Main = () => {\n  _s();\n  const [frogs, setFrogs] = useState([]);\n  const [clickedFrogs, setClickedFrogs] = useState([]);\n  const [currentScore, setCurrentScore] = useState(0);\n  const [highScore, setHighScore] = useState(0);\n  const [gameWon, setGameWon] = useState(false);\n  const FROG_IMAGE_NAMES = getImageNames();\n  useEffect(() => {\n    const loadFrogs = () => {\n      const frogImages = FROG_IMAGE_NAMES.map((imageName, index) => ({\n        id: uuidv4(),\n        name: formatImageName(imageName),\n        image: require(`../assets/${imageName}`)\n      }));\n      setFrogs(shuffleArray(frogImages));\n    };\n    loadFrogs();\n  }, []);\n  const handleCardClick = e => {\n    const frogName = e.target.parentNode.lastChild.textContent;\n    playRound(frogName);\n    setFrogs(shuffleArray(frogs));\n  };\n  const playRound = frogName => {\n    if (clickedFrogs.includes(frogName)) {\n      resetGame();\n    } else {\n      const newScore = currentScore + 1;\n      if (newScore > highScore) {\n        setHighScore(newScore);\n      }\n      setCurrentScore(newScore);\n      setClickedFrogs(prevState => [...prevState, frogName]);\n      setFrogs(shuffleArray(frogs));\n      if (clickedFrogs.length === frogs.length - 1) {\n        setGameWon(true);\n        setHighScore(frogs.length);\n      }\n    }\n  };\n  const resetGame = () => {\n    setClickedFrogs([]);\n    setCurrentScore(0);\n    setGameWon(false);\n  };\n  return /*#__PURE__*/_jsxDEV(MainWrapper, {\n    children: [/*#__PURE__*/_jsxDEV(Scoreboard, {\n      currentScore: currentScore,\n      highScore: highScore\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), gameWon ? /*#__PURE__*/_jsxDEV(Congratulations, {\n      onClick: resetGame,\n      children: \"Myliu tave Rasyte <333\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(CardsGrid, {\n      frogs: frogs,\n      handleCardClick: handleCardClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n_s(Main, \"5cASUnfaU3yaqjJRXh9qmgDyybM=\");\n_c = Main;\nconst MainWrapper = styled.main`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  gap: 4rem;\n  padding: 4rem;\n  margin-bottom: 3.5rem;\n`;\n_c2 = MainWrapper;\nconst Congratulations = styled.button`\n  padding: 10rem 20rem;\n  font-size: 8rem;\n  font-weight: bold;\n  color: white;\n  background-color: ${_ref => {\n  let {\n    theme\n  } = _ref;\n  return theme.colors.frogGreen;\n}};\n  border: none;\n  border-radius: 20px;\n  cursor: pointer;\n`;\n_c3 = Congratulations;\nexport default Main;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Main\");\n$RefreshReg$(_c2, \"MainWrapper\");\n$RefreshReg$(_c3, \"Congratulations\");","map":{"version":3,"names":["React","useState","useEffect","styled","CardsGrid","Scoreboard","shuffleArray","getImageNames","formatImageName","v4","uuidv4","jsxDEV","_jsxDEV","Main","_s","frogs","setFrogs","clickedFrogs","setClickedFrogs","currentScore","setCurrentScore","highScore","setHighScore","gameWon","setGameWon","FROG_IMAGE_NAMES","loadFrogs","frogImages","map","imageName","index","id","name","image","require","handleCardClick","e","frogName","target","parentNode","lastChild","textContent","playRound","includes","resetGame","newScore","prevState","length","MainWrapper","children","fileName","_jsxFileName","lineNumber","columnNumber","Congratulations","onClick","_c","main","_c2","button","_ref","theme","colors","frogGreen","_c3","$RefreshReg$"],"sources":["/home/myka/repos/froggy-memory/src/components/Main.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport CardsGrid from \"./CardsGrid/CardsGrid\";\nimport Scoreboard from \"./Scoreboard/Scoreboard\";\nimport { shuffleArray, getImageNames, formatImageName } from \"../utils\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nconst Main = () => {\n  const [frogs, setFrogs] = useState([]);\n  const [clickedFrogs, setClickedFrogs] = useState([]);\n  const [currentScore, setCurrentScore] = useState(0);\n  const [highScore, setHighScore] = useState(0);\n  const [gameWon, setGameWon] = useState(false);\n\n  const FROG_IMAGE_NAMES = getImageNames();\n  useEffect(() => {\n    const loadFrogs = () => {\n      const frogImages = FROG_IMAGE_NAMES.map((imageName, index) => ({\n        id: uuidv4(),\n        name: formatImageName(imageName),\n        image: require(`../assets/${imageName}`),\n      }));\n      setFrogs(shuffleArray(frogImages));\n    };\n\n    loadFrogs();\n  }, []);\n\n  const handleCardClick = (e) => {\n    const frogName = e.target.parentNode.lastChild.textContent;\n    playRound(frogName);\n    setFrogs(shuffleArray(frogs));\n  };\n\n  const playRound = (frogName) => {\n    if (clickedFrogs.includes(frogName)) {\n      resetGame();\n    } else {\n      const newScore = currentScore + 1;\n      if (newScore > highScore) {\n        setHighScore(newScore);\n      }\n      setCurrentScore(newScore);\n      setClickedFrogs((prevState) => [...prevState, frogName]);\n      setFrogs(shuffleArray(frogs));\n\n      if (clickedFrogs.length === frogs.length - 1) {\n        setGameWon(true);\n        setHighScore(frogs.length);\n      }\n    }\n  };\n\n  const resetGame = () => {\n    setClickedFrogs([]);\n    setCurrentScore(0);\n    setGameWon(false);\n  };\n\n  return (\n    <MainWrapper>\n      <Scoreboard\n        currentScore={currentScore}\n        highScore={highScore}\n      ></Scoreboard>\n      {gameWon ? (\n        <Congratulations onClick={resetGame}>\n          Myliu tave Rasyte &lt;333\n        </Congratulations>\n      ) : (\n        <CardsGrid frogs={frogs} handleCardClick={handleCardClick}></CardsGrid>\n      )}\n    </MainWrapper>\n  );\n};\n\nconst MainWrapper = styled.main`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  gap: 4rem;\n  padding: 4rem;\n  margin-bottom: 3.5rem;\n`;\n\nconst Congratulations = styled.button`\n  padding: 10rem 20rem;\n  font-size: 8rem;\n  font-weight: bold;\n  color: white;\n  background-color: ${({ theme }) => theme.colors.frogGreen};\n  border: none;\n  border-radius: 20px;\n  cursor: pointer;\n`;\n\nexport default Main;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}